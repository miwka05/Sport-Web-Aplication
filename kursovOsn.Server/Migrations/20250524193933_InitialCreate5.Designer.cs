// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using kursovOsn.Server.Data;

#nullable disable

namespace kursovOsn.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250524193933_InitialCreate5")]
    partial class InitialCreate5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tournament_Entry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int?>("ID_Team")
                        .HasColumnType("integer");

                    b.Property<int>("ID_Tournament")
                        .HasColumnType("integer");

                    b.Property<string>("ID_User")
                        .HasColumnType("text");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ID_Team");

                    b.HasIndex("ID_Tournament");

                    b.HasIndex("ID_User");

                    b.ToTable("Tournament_Entries");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Sport_ID")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("Sport_ID");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Player1_ID")
                        .HasColumnType("text");

                    b.Property<string>("Player2_ID")
                        .HasColumnType("text");

                    b.Property<int>("Sport_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Stage_ID")
                        .HasColumnType("integer");

                    b.Property<int?>("Team1_ID")
                        .HasColumnType("integer");

                    b.Property<int?>("Team2_ID")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.Property<int>("Tournament_ID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Player1_ID");

                    b.HasIndex("Player2_ID");

                    b.HasIndex("Sport_ID");

                    b.HasIndex("Stage_ID");

                    b.HasIndex("Team1_ID");

                    b.HasIndex("Team2_ID");

                    b.HasIndex("Tournament_ID");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Play_Off", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Match_ID")
                        .HasColumnType("integer");

                    b.Property<int?>("Next_Match_Loser_ID")
                        .HasColumnType("integer");

                    b.Property<int?>("Next_Match_Winner_ID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Match_ID");

                    b.HasIndex("Next_Match_Loser_ID");

                    b.HasIndex("Next_Match_Winner_ID");

                    b.ToTable("Play_Offs");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Player_Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Match_ID")
                        .HasColumnType("integer");

                    b.Property<string>("Player_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Stat_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Stats")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Match_ID");

                    b.HasIndex("Player_ID");

                    b.HasIndex("Stat_ID");

                    b.ToTable("Player_Statistics");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Sport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Sport_Statistic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sport_ID")
                        .HasColumnType("integer");

                    b.Property<string>("Stat_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("Sport_ID");

                    b.ToTable("Sport_Statistics");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DataType = "int",
                            Sport_ID = 7,
                            Stat_Name = "Голы"
                        },
                        new
                        {
                            ID = 2,
                            DataType = "int",
                            Sport_ID = 7,
                            Stat_Name = "Пасы"
                        },
                        new
                        {
                            ID = 3,
                            DataType = "int",
                            Sport_ID = 7,
                            Stat_Name = "Фолы"
                        },
                        new
                        {
                            ID = 4,
                            DataType = "int",
                            Sport_ID = 7,
                            Stat_Name = "Удары по воротам"
                        },
                        new
                        {
                            ID = 5,
                            DataType = "int",
                            Sport_ID = 7,
                            Stat_Name = "Удары в створ"
                        },
                        new
                        {
                            ID = 6,
                            DataType = "int",
                            Sport_ID = 7,
                            Stat_Name = "Офсайды"
                        },
                        new
                        {
                            ID = 7,
                            DataType = "int",
                            Sport_ID = 7,
                            Stat_Name = "Угловые"
                        },
                        new
                        {
                            ID = 8,
                            DataType = "int",
                            Sport_ID = 7,
                            Stat_Name = "Карточки (жёлтые)"
                        },
                        new
                        {
                            ID = 9,
                            DataType = "int",
                            Sport_ID = 7,
                            Stat_Name = "Карточки (красные)"
                        },
                        new
                        {
                            ID = 10,
                            DataType = "float",
                            Sport_ID = 7,
                            Stat_Name = "Владение мячом (%)"
                        },
                        new
                        {
                            ID = 11,
                            DataType = "float",
                            Sport_ID = 7,
                            Stat_Name = "Точные передачи (%)"
                        },
                        new
                        {
                            ID = 12,
                            DataType = "int",
                            Sport_ID = 8,
                            Stat_Name = "Очки"
                        },
                        new
                        {
                            ID = 13,
                            DataType = "int",
                            Sport_ID = 8,
                            Stat_Name = "Подборы"
                        },
                        new
                        {
                            ID = 14,
                            DataType = "int",
                            Sport_ID = 8,
                            Stat_Name = "Передачи"
                        },
                        new
                        {
                            ID = 15,
                            DataType = "int",
                            Sport_ID = 8,
                            Stat_Name = "Блок-шоты"
                        },
                        new
                        {
                            ID = 16,
                            DataType = "int",
                            Sport_ID = 8,
                            Stat_Name = "Перехваты"
                        },
                        new
                        {
                            ID = 17,
                            DataType = "int",
                            Sport_ID = 8,
                            Stat_Name = "Потери"
                        },
                        new
                        {
                            ID = 18,
                            DataType = "int",
                            Sport_ID = 8,
                            Stat_Name = "Фолы"
                        },
                        new
                        {
                            ID = 19,
                            DataType = "int",
                            Sport_ID = 8,
                            Stat_Name = "3-очковые попадания"
                        },
                        new
                        {
                            ID = 20,
                            DataType = "int",
                            Sport_ID = 8,
                            Stat_Name = "3-очковые попытки"
                        },
                        new
                        {
                            ID = 21,
                            DataType = "int",
                            Sport_ID = 8,
                            Stat_Name = "2-очковые попадания"
                        },
                        new
                        {
                            ID = 22,
                            DataType = "int",
                            Sport_ID = 8,
                            Stat_Name = "2-очковые попытки"
                        },
                        new
                        {
                            ID = 23,
                            DataType = "int",
                            Sport_ID = 8,
                            Stat_Name = "Штрафные попадания"
                        },
                        new
                        {
                            ID = 24,
                            DataType = "int",
                            Sport_ID = 8,
                            Stat_Name = "Штрафные попытки"
                        },
                        new
                        {
                            ID = 25,
                            DataType = "float",
                            Sport_ID = 8,
                            Stat_Name = "Эффективность (%)"
                        },
                        new
                        {
                            ID = 26,
                            DataType = "int",
                            Sport_ID = 9,
                            Stat_Name = "Эйсы"
                        },
                        new
                        {
                            ID = 27,
                            DataType = "int",
                            Sport_ID = 9,
                            Stat_Name = "Двойные ошибки"
                        },
                        new
                        {
                            ID = 28,
                            DataType = "int",
                            Sport_ID = 9,
                            Stat_Name = "Выигранные подачи"
                        },
                        new
                        {
                            ID = 29,
                            DataType = "float",
                            Sport_ID = 9,
                            Stat_Name = "Процент первой подачи"
                        },
                        new
                        {
                            ID = 30,
                            DataType = "int",
                            Sport_ID = 9,
                            Stat_Name = "Выигранные розыгрыши"
                        },
                        new
                        {
                            ID = 31,
                            DataType = "int",
                            Sport_ID = 9,
                            Stat_Name = "Брейк-поинты реализованы"
                        },
                        new
                        {
                            ID = 32,
                            DataType = "int",
                            Sport_ID = 9,
                            Stat_Name = "Брейк-поинты всего"
                        },
                        new
                        {
                            ID = 33,
                            DataType = "int",
                            Sport_ID = 9,
                            Stat_Name = "Ошибки (невынужденные)"
                        },
                        new
                        {
                            ID = 34,
                            DataType = "int",
                            Sport_ID = 9,
                            Stat_Name = "Вынужденные ошибки"
                        },
                        new
                        {
                            ID = 35,
                            DataType = "float",
                            Sport_ID = 9,
                            Stat_Name = "Процент выигранных очков"
                        });
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Creator_ID")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Sport_ID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Creator_ID");

                    b.HasIndex("Sport_ID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Team_Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Match_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Stat_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Stats")
                        .HasColumnType("integer");

                    b.Property<int>("Team_ID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Match_ID");

                    b.HasIndex("Stat_ID");

                    b.HasIndex("Team_ID");

                    b.ToTable("Team_Statistics");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Team_entry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Team_ID")
                        .HasColumnType("integer");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("Team_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Team_Entries");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Team_player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ID_Team")
                        .HasColumnType("integer");

                    b.Property<string>("ID_User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ID_Team");

                    b.HasIndex("ID_User");

                    b.ToTable("Team_Players");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Tournament", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Creator_ID")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Format_ID")
                        .HasColumnType("integer");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sport_ID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("solo")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("Creator_ID");

                    b.HasIndex("Format_ID");

                    b.HasIndex("Sport_ID");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Tournament_Format", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Tournament_Formats");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Tournament_Stages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Stage_order")
                        .HasColumnType("integer");

                    b.Property<int>("Tournament_ID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("Tournament_ID");

                    b.ToTable("Tournament_Stages");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Tournament_Standings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Draws")
                        .HasColumnType("integer");

                    b.Property<int>("Goals_Conceded")
                        .HasColumnType("integer");

                    b.Property<int>("Goals_Scored")
                        .HasColumnType("integer");

                    b.Property<int>("Losses")
                        .HasColumnType("integer");

                    b.Property<int>("Matches")
                        .HasColumnType("integer");

                    b.Property<string>("Player_ID")
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<int?>("Team_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Tournament_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Player_ID");

                    b.HasIndex("Team_ID");

                    b.HasIndex("Tournament_ID");

                    b.ToTable("Tournament_Standings");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Tournament_participant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int?>("Team_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Tournament_ID")
                        .HasColumnType("integer");

                    b.Property<string>("User_ID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("Team_ID");

                    b.HasIndex("Tournament_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Tournament_Participants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("kursovOsn.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tournament_Entry", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.Team", "Team")
                        .WithMany("TournamentEntries")
                        .HasForeignKey("ID_Team")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("kursovOsn.Server.Models.Tournament", "Tournament")
                        .WithMany("Entries")
                        .HasForeignKey("ID_Tournament")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kursovOsn.Server.Models.ApplicationUser", "User")
                        .WithMany("Tournaments")
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Team");

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.ApplicationUser", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.Sport", "Sport")
                        .WithMany("Users")
                        .HasForeignKey("Sport_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Match", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.ApplicationUser", "Player1")
                        .WithMany("Match1")
                        .HasForeignKey("Player1_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("kursovOsn.Server.Models.ApplicationUser", "Player2")
                        .WithMany("Match2")
                        .HasForeignKey("Player2_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("kursovOsn.Server.Models.Sport", "Sport")
                        .WithMany("Matches")
                        .HasForeignKey("Sport_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kursovOsn.Server.Models.Tournament_Stages", "Stage")
                        .WithMany("Matches")
                        .HasForeignKey("Stage_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kursovOsn.Server.Models.Team", "Team1")
                        .WithMany("MatchesAsTeam1")
                        .HasForeignKey("Team1_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("kursovOsn.Server.Models.Team", "Team2")
                        .WithMany("MatchesAsTeam2")
                        .HasForeignKey("Team2_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("kursovOsn.Server.Models.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("Tournament_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Player1");

                    b.Navigation("Player2");

                    b.Navigation("Sport");

                    b.Navigation("Stage");

                    b.Navigation("Team1");

                    b.Navigation("Team2");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Play_Off", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.Match", "Match")
                        .WithMany("Play_Offs")
                        .HasForeignKey("Match_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kursovOsn.Server.Models.Match", "NextMatchLoser")
                        .WithMany("Play_Offs_L")
                        .HasForeignKey("Next_Match_Loser_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("kursovOsn.Server.Models.Match", "NextMatchWinner")
                        .WithMany("Play_Offs_W")
                        .HasForeignKey("Next_Match_Winner_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Match");

                    b.Navigation("NextMatchLoser");

                    b.Navigation("NextMatchWinner");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Player_Statistic", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.Match", "Match")
                        .WithMany("PlStat")
                        .HasForeignKey("Match_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kursovOsn.Server.Models.ApplicationUser", "Player")
                        .WithMany("Stat")
                        .HasForeignKey("Player_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kursovOsn.Server.Models.Sport_Statistic", "Sport_Statistic")
                        .WithMany("PlayerStatistics")
                        .HasForeignKey("Stat_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("Sport_Statistic");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Sport_Statistic", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.Sport", "Sport")
                        .WithMany("Statistics")
                        .HasForeignKey("Sport_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Team", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.ApplicationUser", "Creator")
                        .WithMany("Team_owner")
                        .HasForeignKey("Creator_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("kursovOsn.Server.Models.Sport", "Sport")
                        .WithMany("Teams")
                        .HasForeignKey("Sport_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Team_Statistic", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.Match", "Match")
                        .WithMany("TeamStat")
                        .HasForeignKey("Match_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kursovOsn.Server.Models.Sport_Statistic", "Sport_Statistic")
                        .WithMany("TeamStatistics")
                        .HasForeignKey("Stat_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kursovOsn.Server.Models.Team", "Team")
                        .WithMany("Statistics")
                        .HasForeignKey("Team_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Sport_Statistic");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Team_entry", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.Team", "Team")
                        .WithMany("TeamEntries")
                        .HasForeignKey("Team_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kursovOsn.Server.Models.ApplicationUser", "User")
                        .WithMany("Team_e")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Team_player", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.Team", "Team")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("ID_Team")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kursovOsn.Server.Models.ApplicationUser", "User")
                        .WithMany("Teams")
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Tournament", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.ApplicationUser", "Creator")
                        .WithMany("Tournament_owner")
                        .HasForeignKey("Creator_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("kursovOsn.Server.Models.Tournament_Format", "Format")
                        .WithMany("Tournaments")
                        .HasForeignKey("Format_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kursovOsn.Server.Models.Sport", "Sport")
                        .WithMany("Tournaments")
                        .HasForeignKey("Sport_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Format");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Tournament_Stages", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.Tournament", "Tournament")
                        .WithMany("Stages")
                        .HasForeignKey("Tournament_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Tournament_Standings", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.ApplicationUser", "Player")
                        .WithMany("Tournament_st")
                        .HasForeignKey("Player_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("kursovOsn.Server.Models.Team", "Team")
                        .WithMany("Standings")
                        .HasForeignKey("Team_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("kursovOsn.Server.Models.Tournament", "Tournament")
                        .WithMany("Standings")
                        .HasForeignKey("Tournament_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Tournament_participant", b =>
                {
                    b.HasOne("kursovOsn.Server.Models.Team", "Team")
                        .WithMany("TournamentParticipants")
                        .HasForeignKey("Team_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("kursovOsn.Server.Models.Tournament", "Tournament")
                        .WithMany("Participants")
                        .HasForeignKey("Tournament_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kursovOsn.Server.Models.ApplicationUser", "User")
                        .WithMany("Tournament_p")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Team");

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.ApplicationUser", b =>
                {
                    b.Navigation("Match1");

                    b.Navigation("Match2");

                    b.Navigation("Stat");

                    b.Navigation("Team_e");

                    b.Navigation("Team_owner");

                    b.Navigation("Teams");

                    b.Navigation("Tournament_owner");

                    b.Navigation("Tournament_p");

                    b.Navigation("Tournament_st");

                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Match", b =>
                {
                    b.Navigation("PlStat");

                    b.Navigation("Play_Offs");

                    b.Navigation("Play_Offs_L");

                    b.Navigation("Play_Offs_W");

                    b.Navigation("TeamStat");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Sport", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Statistics");

                    b.Navigation("Teams");

                    b.Navigation("Tournaments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Sport_Statistic", b =>
                {
                    b.Navigation("PlayerStatistics");

                    b.Navigation("TeamStatistics");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Team", b =>
                {
                    b.Navigation("MatchesAsTeam1");

                    b.Navigation("MatchesAsTeam2");

                    b.Navigation("Standings");

                    b.Navigation("Statistics");

                    b.Navigation("TeamEntries");

                    b.Navigation("TeamPlayers");

                    b.Navigation("TournamentEntries");

                    b.Navigation("TournamentParticipants");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Tournament", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Matches");

                    b.Navigation("Participants");

                    b.Navigation("Stages");

                    b.Navigation("Standings");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Tournament_Format", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("kursovOsn.Server.Models.Tournament_Stages", b =>
                {
                    b.Navigation("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
